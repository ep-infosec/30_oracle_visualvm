# Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.

# Shared entry
LBL_ClassName=Class name:


LBL_DS_Name=Reachable size
LBL_DS_Desc=Computes deep size of all instances of given class
LBL_DS_LongDesc=<html><body>Computes reachable (deep) size of all instances of given class.</body></html>
LBL_DS_ResHeader=<h2>Reachable size (all instances of {0})</h2>

LBL_DupStr_Name=Duplicated Strings
LBL_DupStr_Desc=Find String duplicates and measure their cost
LBL_DupStr_LongDesc=<html><body>Computes total memory wasted by duplicated \
<code>String</code>s and tries to identify their referrers.</body></html>
FMT_DupStr_Result=<b>Total waste: {0}B</b>, distributed by domain source:<br>

LBL_HMH_Name=HashMap histograms
LBL_HMH_Desc=Scans all HashMap instances and prints statistics of their usage
LBL_HMH_LongDesc=<html><body>Computes memory used by <code>HashMap</code> \
structures and <code>String</code>s referenced from the <code>HashMap</code>s.</body></html>

LBL_OverStr_Name=Overallocated Strings
LBL_OverStr_Desc=Covers long living results of String.substring(), computes amount of wasted memory
LBL_OverStr_LongDesc=<html><body>Computes overhead of <code>String</code>s that \
have their backing <code>char[]</code> larger than necessary (for example \
result of <code>String.substring()</code>).</body></html>
FMT_OverStr_Result=<b>Wasted {0}B</b> on overallocated Strings<br>

LBL_RSBC_Name=Retained sets by class histograms
LBL_RSBC_Desc=Prints histogram of retained set held by every class
LBL_RSBC_LongDesc=<html><body><b>Warning!</b><br><br>This rule takes a long \
time to compute and can use a big amout of memory on large heaps!</body></html>

LBL_RSBI_Name=Histograms of retained sets
LBL_RSBI_Desc=Prints histogram of retained set held by instances of class
LBL_RSBI_LongDesc=<html><body>Computes retained set for each instance of given class.</body></html>

LBL_TMB_Name=Too many Booleans
LBL_TMB_Desc=Checks instances of Boolean other than Boolean.TRUE and Boolean.FALSE
LBL_TMB_LongDesc=<html><body>Checks if there are more than two instances of \
<code>Boolean</code> on the heap (only <code>Boolean.TRUE</code> and \
<code>Boolean.FALSE</code> are necessary).</body></html>
FMT_TMB_Result=There are {0} Boolean instances wasting {1}B<br>
FMT_TMB_ResultOK=There are not more than two Boolean instances: OK


LBL_WWHM_Name=Leaking WeakHashMap
LBL_WWHM_Desc=WeakHashMap with values strong referencing the keys
LBL_WWHM_LongDesc=<html><body>Identifies improperly used <code>WeakHashMap</code>s \
where a value strongly references its key.</body></html>
FMT_WWHM_Entry={0}: {1} is wrong: key {2} is reachable from value {3}<br>
